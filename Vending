#include<iostream>
#include "Vending.h"
#include "Vending.cpp"
using namespace study;
using namespace std;

int main()
{
	setlocale(LC_ALL, "");
	Module::Module("Шоколад", 1, 10, 10);
	ostream& operator<<(ostream & output, const Module & m);

	char b = 0;
	char s = 0;
	std::cout << "Что вы хотите купить?" << endl;
	std::cout << "b - Bounty,  s - Snickers" << endl;
	std::cin >> b;
	std::cin >> s;

	return 0;
}

________________________________________
#pragma once
#include <iostream>

using namespace std;

namespace study
{
    class Module
    {
    public:

        Module(const char* name, short slot, short snickers, short bounty);
        Module(const char* name, short slot);
        Module(const char* name);
        Module(const Module& other);

        ~Module() = default;

        Module& operator++();
        Module& operator--();

        friend ostream& operator<<(ostream& output, const Module& m);

        const char* getModuleName() const;
        void setModuleName(const char* value);

        short getSlotCount() const;
        void setSlotCount(short value);

        short getSnickersCount() const;
        void setSnickersCount(short value);

        short getBountyCount() const;
        void getBountyCount(short value);

        void setBountyCount(short value);

    private:
        const char* moduleName;
        short SlotCount;
        short SnickersCount;
        short BountyCount;
    };

}
________________________________________________
#include "Vending.h"
#include <iostream>
using namespace std;

namespace study
{

    Module::Module(const char* name, short slot, short snickers, short bounty)
    {
        moduleName = name;
        SlotCount = slot;
        SnickersCount = snickers;
        BountyCount = bounty;
    }

    Module::Module(const char* name, short slot)
    {
        moduleName = name;
        SlotCount = slot;
    }

    Module::Module(const char* name)
    {
        moduleName = name;
    }

    Module::Module(const Module& other)
    {
        this->moduleName = other.moduleName;
        this->SlotCount = other.SlotCount;
        this->SnickersCount = other.SnickersCount;
        this->BountyCount = other.BountyCount;
    }

    Module& Module::operator++()
    {
        ++BountyCount;
        return *this;
    }

    Module& Module::operator--()
    {
        --BountyCount;
        return *this;
    }

    const char* Module::getModuleName() const
    {
        return moduleName;
    }

    void Module::setModuleName(const char* value)
    {
        moduleName = value;
    }

    short Module::getSlotCount() const
    {
        return SlotCount;
    }

    void Module::setSlotCount(short value)
    {
        SlotCount = value;
    }

    short Module::getSnickersCount() const
    {
        return SnickersCount;
    }

    void Module::setSnickersCount(short value)
    {
        char s = 0;
        if (value > 0)
            SnickersCount = value;
        else
            cout << "Шоколад кончился";

    }

    short Module::getBountyCount() const
    {
        return BountyCount;
    }

    void Module::setBountyCount(short value)
    {
        char b = 0;
        if (value > 0)
            BountyCount = value;
        else
            cout << "Шоколад кончился";
    }

    ostream& operator<<(ostream& output, const Module& m)
    {
        output << "Имя аппарата: " << m.moduleName << endl
            << "Количество слотов: " << m.SlotCount << endl
            << "Количество батончиков Snickers: " << m.SnickersCount << endl
            << "Количество батончиков Bounty: " << m.BountyCount << endl;
        return output;
    }

}

_______________________________________________

